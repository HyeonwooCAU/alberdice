# --- Defaults ---

# --- pymarl options ---
runner: "episode" # Runs 1 env for an episode
mac: "basic_mac" # Basic controller
env: "sc2" # Environment name
env_args: {} # Arguments for the environment
batch_size_run: 1 # Number of environments to run in parallel
test_nepisode: 20 # Number of episodes to test for
test_interval: 2000 # Test after {} timesteps have passed
test_greedy: True # Use greedy evaluation (if False, will set epsilon floor to 0
log_interval: 2000 # Log summary of stats after every {} timesteps
runner_log_interval: 2000 # Log runner stats (not test stats) every {} timesteps
learner_log_interval: 2000 # Log training stats every {} timesteps
t_max: 3100000 # Stop running after this many timesteps
use_cuda: True # Use gpu by default unless it isn't available
buffer_cpu_only: True # If true we won't keep all of the replay buffer in vram

# --- dmaq hyperparamter ---
is_save_buffer: False
save_buffer_size: 10000
save_buffer_interval: 1000
is_batch_rl: True
load_buffer_id: ''
save_buffer_id: 0
is_from_start: True
num_circle: 1
burn_in_period: 32 # threshold for buffer.can_sample(args.batch_size): train

save_buffer_during_train: False # for every save_buffer_interval, save the buffer

# --- Logging options ---
use_tensorboard: False # Log results to tensorboard
evaluate: False # Evaluate model for test_nepisode episodes and quit (no training)
save_replay: False # Saving the replay of the model loaded from checkpoint_path
local_results_path: "results" # Path for local results
output_visualize_data: True

use_wandb: False # log results to wandb

# --- RL hyperparameters ---
gamma: 0.99
batch_size: 32 # Number of episodes to train on
buffer_size: 32 # Size of the replay buffer
lr: 0.0005 # Learning rate for agents
critic_lr: 0.0005 # Learning rate for critics
optim_alpha: 0.99 # RMSProp alpha
optim_eps: 0.00001 # RMSProp epsilon
grad_norm_clip: 10 # Reduce magnitude of gradients above this L2 norm

# --- Agent parameters ---
agent: "sep_transformer" # Default agent: [sep_transformer, sep_mlp, sep_rnn, rnn, mlp]
rnn_hidden_dim: 128 # Size of hidden state for default rnn agent
obs_agent_id: False # Include the agent's one_hot id in the observation
obs_last_action: False # Include the agent's last action (one_hot) in the observation
obs_full_state: False # use full state as the policy inputs

# --- Experiment running params ---
repeat_id: 1
label: "default_label"

no_train: False # similar to evaluate but run more trajectories and have the option to save buffer
buffer_path: "../buffer/"

absorbing_state: False
tabular_network: False # use tabular NN for sep_mlp_agent

# for condor save/load
save_model: True # Save the models to disk
save_model_interval: 200000 # Save models after this many timesteps
checkpoint_path: "checkpoints" # Load a checkpoint from this path
load_step: 0 # Load model trained on this many timesteps (0 if choose max possible)
replace_prev_checkpoint: False # only keep the latest trained model

standardize_obs: False
standardize_reward: False
reward_weight: 1
sparse_reward_dataset: False # sparse out the rewards given in the dataset

# transformer policy
n_block: 2
n_embed: 32
n_head: 1
add_actions_transformer: True

use_vec_eval: False  # currently, assumes gfootball only
num_vec_envs: 8

# for AlberDICE
nu_grad_penalty_coeff: 0.1
cql_coeff: 0.1

# useful info
cluster_id: 0
process_id: 0